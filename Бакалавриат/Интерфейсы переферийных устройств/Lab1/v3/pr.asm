format mz
BASE equ 3F8h		; Базовый адрес порта
cli					; Запрет маскируемых прерываний
in al, 21h			; Запрет аппаратных прерываний
and al, 11101111b	; 4 бит -- IRQ4
out 21h, al
mov al, 0Ch			; 0Ch -- прерывание COM1
mov ah, 35h			; Функция получения вектора прерывания
int 21h
push es 			; Сохраняем адрес исходного обработчика
push bx 			; Сохраняем смещение исходного обработчика
mov ax, cs			; Замена исходного обработчика прерывания нашим обработчиком
mov ds, ax			; cs -- адрес кодового сегмента нашей программы
mov dx, new			 ; new -- смещение нашего обработчика
mov al, 0Ch			; 0Ch -- прерывание COM1
mov ah, 25h			; Функция установки вектора прерывания
int 21h
in al, 21h			; Разрешение аппаратных прерываний
and al, 11111111b
out 21h, al
sti					; Разрешение маскируемых прерываний
mov ax, 10000000b	; Установка регистров в режим делителя частоты
mov dx, BASE+3
out dx, al
mov ax, 00h			; Заносим старший байт скорости
mov dx, BASE+1
out dx, al
mov ax, 0Ch			; Заносим младший байт скорости: 00Ch - скорость 9600 бод
mov dx, BASE
out dx, al
mov ax, 00111011b	; Устанавливаем параметры порта: 8-бит данных, 1 стоп-бит, контроль четности
mov dx, BASE+3
out dx, al
mov ax, 00000001b	; Разрешаем порту генерацию прерываний по приему символа
mov dx, BASE+1
out dx, al
elcyc:				; Главный цикл программы (бесконечный)
jmp elcyc		; Он нужен только для того, чтобы программа продолжала работать
new:				; Наш обработчик прерывания

    xor al, al 
    mov dx, 3FAh
	in al, dx;
	and al, 00000100b
	jz elcyc
	
	
	
	mov dx, BASE	; Читаем символ из порта
	in al, dx
	cmp al, 1Bh		; Проверка: нажат ли ESC
	je exit 		; Если да -- переход к exit
	mov ah, 0Eh		; Вывод символа на экран
	mov dl, al
	int 10h



	mov al, 20h		; Сообщаем процессору, что прерывание обработано
	out 20h, al
	iret			; Возвращаем управление процессору
exit:
	pop dx			; Восстанавливаем исходный обработчик прерывания
	pop ds
	mov al, 0Ch
	mov ah, 4ch
	int 21h